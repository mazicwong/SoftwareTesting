[
  {
    "codes": "        modCount++; ",
    "blocks": []
  },
  {
    "codes": "        ensureCapacityHelper(minCapacity); ",
    "blocks": []
  },
  {
    "codes": "    } ",
    "blocks": []
  },
  {
    "codes": " ",
    "blocks": []
  },
  {
    "codes": "    private void ensureCapacityHelper(int minCapacity) { ",
    "blocks": []
  },
  {
    "codes": "        int oldCapacity = elementData.length; ",
    "blocks": [0]
  },
  {
    "codes": "        if (minCapacity > oldCapacity) { ",
    "blocks": [
      0,
      1
    ]
  },
  {
    "codes": "            Object[] oldData = elementData; ",
    "blocks": [2]
  },
  {
    "codes": "            int newCapacity = (capacityIncrement > 0) ? (oldCapacity + capacityIncrement) ",
    "blocks": [
      2,
      3,
      4,
      5,
      6
    ]
  },
  {
    "codes": "                              : (oldCapacity * 2); ",
    "blocks": []
  },
  {
    "codes": "            if (newCapacity < minCapacity) { ",
    "blocks": [
      6,
      7
    ]
  },
  {
    "codes": "                newCapacity = minCapacity; ",
    "blocks": [8]
  },
  {
    "codes": "            } ",
    "blocks": []
  },
  {
    "codes": "            elementData = new Object[newCapacity]; ",
    "blocks": [9]
  },
  {
    "codes": "            for (int i = 0; i < elementCount; i++) { ",
    "blocks": [
      9,
      10,
      11,
      12,
      13
    ]
  },
  {
    "codes": "                elementData[i] = oldData[i]; ",
    "blocks": [
      12,
      13
    ]
  },
  {
    "codes": "            } ",
    "blocks": [
      12,
      13
    ]
  },
  {
    "codes": "                                                                           ",
    "blocks": []
  },
  {
    "codes": "        } ",
    "blocks": []
  },
  {
    "codes": "    } ",
    "blocks": []
  },
  {
    "codes": " ",
    "blocks": []
  },
  {
    "codes": "    public synchronized int size() { ",
    "blocks": []
  }
]