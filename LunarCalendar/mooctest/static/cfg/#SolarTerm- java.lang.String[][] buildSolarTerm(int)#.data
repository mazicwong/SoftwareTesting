[
  {
    "codes": "       ",
    "blocks": []
  },
  {
    "codes": "                      ",
    "blocks": []
  },
  {
    "codes": "                   ",
    "blocks": []
  },
  {
    "codes": "        ",
    "blocks": []
  },
  {
    "codes": "    public String[][] buildSolarTerm(int year) { ",
    "blocks": []
  },
  {
    "codes": "        String[] tmp = new String[24]; ",
    "blocks": [0]
  },
  {
    "codes": "        double jd = 365.2422 * (year - 2000), q; ",
    "blocks": [0]
  },
  {
    "codes": "        int j; ",
    "blocks": [0]
  },
  {
    "codes": "        for (int i = 0; i < tmp.length; i++) { ",
    "blocks": [
      0,
      1,
      2,
      3,
      4
    ]
  },
  {
    "codes": "            j = i - 5; ",
    "blocks": [
      0,
      3,
      4
    ]
  },
  {
    "codes": "            q = angleCal(jd + j * 15.2, j * 15, 0); ",
    "blocks": [
      0,
      3,
      4
    ]
  },
  {
    "codes": "            q = q + J2000 + (double) 8 / 24; ",
    "blocks": [
      0,
      3,
      4
    ]
  },
  {
    "codes": "            setFromJD(q, true); ",
    "blocks": [
      0,
      3,
      4
    ]
  },
  {
    "codes": "            tmp[i] = String.valueOf((int) D); ",
    "blocks": [
      0,
      3,
      4
    ]
  },
  {
    "codes": "        } ",
    "blocks": [
      0,
      3,
      4
    ]
  },
  {
    "codes": "        return TextUtils.arraysConvert(tmp, 2); ",
    "blocks": [
      0,
      4
    ]
  },
  {
    "codes": "    } ",
    "blocks": []
  },
  {
    "codes": " ",
    "blocks": []
  },
  {
    "codes": "    private void setFromJD(double jd, boolean utc) { ",
    "blocks": []
  },
  {
    "codes": "        if (utc) ",
    "blocks": []
  },
  {
    "codes": "            jd -= this.deltaT2(jd - J2000); ",
    "blocks": []
  }
]